{"version":3,"sources":["Redux/actions.js","Components/FormContacts/FormContacts.jsx","Components/Filter/Filter.jsx","Components/ContactItem/ContactItem.jsx","Components/ListContacts/ListContacts.jsx","App.js","Redux/reducer.js","Redux/store.js","index.js","Components/FormContacts/FormContacts.module.css"],"names":["addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","FormContacts","state","handleChange","target","value","setState","handleSubmit","event","preventDefault","props","onSubmit","reset","this","className","s","form","type","input","onChange","pattern","title","required","disabled","Component","connect","contacts","filter","dispatch","e","actions","ContactItem","contact","onDelete","onClick","handleDelete","ListContacts","map","getVisibleContacts","items","normalizedFilter","toLowerCase","includes","onAddContact","onDeleteContact","onChangeFilter","createReducer","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e8e69bfe.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nconst addContact = createAction('contact/add', ({ name, number }) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contact/delete');\nconst changeFilter = createAction('contact/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './FormContacts.module.css';\n\nclass FormContacts extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.name === '') {\n      return;\n    }\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={s.form}>\n        <label className=\"label\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className={s.input}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            className={s.input}\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          type=\"submit\"\n          disabled={name === '' || number === '' ? true : false}\n          className=\"btn\"\n        >\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default FormContacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../Redux/actions';\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"container\">\n    <label className=\"label\">\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} className=\"input\" />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact, onDelete }) => {\n  const { id, number, name } = contact;\n\n  const handleDelete = id => onDelete(id);\n\n  return (\n    <li key={id} id={id} className=\"contact\">\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" className=\"btn\" onClick={() => handleDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport ContactItem from '../ContactItem';\n\nimport PropTypes from 'prop-types';\n\nconst ListContacts = ({ contacts, onDelete }) => {\n  return (\n    <ul className=\"container list\">\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} onDelete={onDelete} />\n      ))}\n    </ul>\n  );\n};\n\nListContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ListContacts;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport actions from './Redux/actions';\nimport FormContacts from './Components/FormContacts/FormContacts';\nimport Filter from './Components/Filter/Filter';\nimport ListContacts from './Components/ListContacts/ListContacts';\n\nconst App = ({\n  items,\n  filter,\n  onAddContact,\n  onDeleteContact,\n  onChangeFilter,\n}) => {\n  return (\n    <>\n      <h1 className=\"title\">Phonebook</h1>\n      <FormContacts onSubmit={onAddContact} />\n\n      <h2 className=\"title\">Contacts</h2>\n      <Filter value={filter} onChange={onChangeFilter} />\n\n      <ListContacts contacts={items} onDelete={onDeleteContact} />\n    </>\n  );\n};\n\nconst getVisibleContacts = (items, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  items: getVisibleContacts(items, filter),\n  filter: filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(actions.addContact(contact)),\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n  onChangeFilter: value => dispatch(actions.changeFilter(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './reducer';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContacts_form__OuOxW\",\"input\":\"FormContacts_input__1a2Ec\"};"],"sourceRoot":""}