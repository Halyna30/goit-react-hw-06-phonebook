{"version":3,"sources":["Components/FormContacts/FormContacts.module.css","Redux/types.js","Redux/actions.js","Components/FormContacts/FormContacts.jsx","Components/Filter/Filter.jsx","Components/ContactItem/ContactItem.jsx","Components/ListContacts/ListContacts.jsx","App.js","Redux/reducer.js","Redux/store.js","index.js"],"names":["module","exports","types","CONTACT_ADD","CONTACT_DELETE","CHANGE_FILTER","name","number","type","payload","id","nanoid","contactId","value","FormContacts","state","handleChange","target","setState","handleSubmit","event","preventDefault","props","onSubmit","reset","this","className","s","form","onChange","disabled","Component","connect","filter","dispatch","e","actions","ContactItem","contact","onDelete","onClick","handleDelete","ListContacts","contacts","map","getVisibleContacts","normalizedFilter","toLowerCase","includes","onAddContact","onDeleteContact","onChangeFilter","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bad92fbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContacts_form__OuOxW\"};","const types = {\n  CONTACT_ADD: 'contact/add',\n  CONTACT_DELETE: 'contact/delete',\n  CHANGE_FILTER: 'contact/changeFilter',\n};\n\nexport default types;\n","import types from '../Redux/types';\nimport { nanoid } from 'nanoid';\n\nconst addContact = ({ name, number }) => ({\n  type: types.CONTACT_ADD,\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n});\n\nconst deleteContact = contactId => ({\n  type: types.CONTACT_DELETE,\n  payload: contactId,\n});\n\nconst changeFilter = value => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n});\n\nexport default { addContact, deleteContact, changeFilter };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './FormContacts.module.css';\n\nclass FormContacts extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.name === '') {\n      return;\n    }\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={s.form}>\n        <label className=\"label\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            className=\"input\"\n          />\n        </label>\n        <label className=\"label\">\n          Phone Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            className=\"input\"\n          />\n        </label>\n        <button\n          type=\"submit\"\n          disabled={name === '' || number === '' ? true : false}\n          className=\"btn\"\n        >\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default FormContacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../Redux/actions';\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"container\">\n    <label className=\"label\">\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} className=\"input\" />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact, onDelete }) => {\n  const { id, number, name } = contact;\n\n  const handleDelete = id => onDelete(id);\n\n  return (\n    <li key={id} id={id} className=\"contact\">\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" className=\"btn\" onClick={() => handleDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport ContactItem from '../ContactItem';\n\nimport PropTypes from 'prop-types';\n\nconst ListContacts = ({ contacts, onDelete }) => {\n  return (\n    <ul className=\"container list\">\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} onDelete={onDelete} />\n      ))}\n    </ul>\n  );\n};\n\nListContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ListContacts;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport actions from './Redux/actions';\nimport FormContacts from './Components/FormContacts/FormContacts';\nimport Filter from './Components/Filter/Filter';\nimport ListContacts from './Components/ListContacts/ListContacts';\n\nconst App = ({\n  contacts,\n  filter,\n  onAddContact,\n  onDeleteContact,\n  onChangeFilter,\n}) => {\n  return (\n    <>\n      <h1 className=\"title\">Phonebook</h1>\n      <FormContacts onSubmit={onAddContact} />\n\n      <h2 className=\"title\">Contacts</h2>\n      <Filter value={filter} onChange={onChangeFilter} />\n\n      <ListContacts contacts={contacts} onDelete={onDeleteContact} />\n    </>\n  );\n};\n\n// state = {\n//   contacts: [],\n//   filter: '',\n// };\n\n// componentDidMount() {\n//   const contacts = localStorage.getItem('contacts');\n//   const parsedСontacts = JSON.parse(contacts);\n\n//   if (parsedСontacts) {\n//     this.setState({ contacts: parsedСontacts });\n//   }\n// }\n\n// componentDidUpdate(prevState) {\n//   const nextСontacts = this.state.contacts;\n//   const prevСontacts = prevState.contacts;\n\n//   if (nextСontacts !== prevСontacts) {\n//     localStorage.setItem('contacts', JSON.stringify(nextСontacts));\n//   }\n// }\n\n// handleSubmit = ({ name, number }) => {\n//   const isInContacts = this.state.contacts.find(\n//     item => item.name.toLowerCase() === name.toLowerCase(),\n//   );\n//   if (isInContacts) {\n//     alert(`${name} is already in contacts`);\n//     return;\n//   }\n\n//   const contact = {\n//     id: nanoid(),\n//     name,\n//     number,\n//   };\n\n//   this.setState(({ contacts }) => ({\n//     contacts: [contact, ...contacts],\n//   }));\n// };\n\n// changeFilter = event => {\n//   const { value } = event.target;\n\n//   this.setState({\n//     filter: value,\n//   });\n// };\n\n// handlerDelete = contactId => {\n//   this.setState(prevState => ({\n//     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//   }));\n// };\n\nconst getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\nconst mapStateToProps = ({ contacts, filter }) => ({\n  contacts: getVisibleContacts(contacts, filter),\n  filter: filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(actions.addContact(contact)),\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n  onChangeFilter: value => dispatch(actions.changeFilter(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import types from './types';\nimport { combineReducers } from 'redux';\n\nconst contacts = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.CONTACT_ADD:\n      return [...state, payload];\n\n    case types.CONTACT_DELETE:\n      return state.filter(({ id }) => id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  contacts,\n  filter,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}